name: Security Audit

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  dependency-audit:
    name: Dependency Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run npm audit
        run: |
          npm audit --json > audit-report.json || true
          if [ $(jq '.metadata.vulnerabilities.high + .metadata.vulnerabilities.critical' audit-report.json) -gt 0 ]; then
            echo "High or critical vulnerabilities found!"
            npm audit
            exit 1
          fi
      
      - name: Check for outdated dependencies
        run: |
          npm outdated || true
      
      - name: Upload audit report
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: npm-audit-report
          path: audit-report.json

  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  sast-analysis:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, typescript
      
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
      
      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/owasp-top-ten
            p/typescript
            p/react
            p/nextjs

  container-scanning:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: false # Enable when using containers
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  infrastructure-security:
    name: Infrastructure Security Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Check for hardcoded credentials
        run: |
          # Check for common patterns of hardcoded credentials
          if grep -r -E "(api_key|apikey|api-key)\s*[:=]\s*['\"][A-Za-z0-9]{20,}['\"]" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" --exclude-dir=node_modules --exclude-dir=.next .; then
            echo "Potential hardcoded API keys found!"
            exit 1
          fi
          
          if grep -r -E "(password|passwd|pwd)\s*[:=]\s*['\"][^'\"]+['\"]" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" --exclude-dir=node_modules --exclude-dir=.next .; then
            echo "Potential hardcoded passwords found!"
            exit 1
          fi
      
      - name: Validate environment variables
        run: |
          # Check that sensitive env vars are not committed
          if grep -r "NEXT_PUBLIC_GOOGLE_CLIENT_ID.*=.*AIza" --include="*.env*" --exclude="*.example" .; then
            echo "Google Client ID should not be committed!"
            exit 1
          fi

  notify-on-failure:
    name: Notify on Security Issues
    runs-on: ubuntu-latest
    needs: [dependency-audit, secret-scanning, sast-analysis, infrastructure-security]
    if: failure()
    steps:
      - name: Create issue for security vulnerabilities
        uses: actions/github-script@v6
        with:
          script: |
            const date = new Date().toISOString().split('T')[0];
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Security Audit Failed - ${date}`,
              body: `## Security Audit Failed\n\nThe automated security audit has detected potential vulnerabilities.\n\nPlease check the [workflow run](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for details.\n\n### Required Actions\n- [ ] Review the security findings\n- [ ] Fix any critical or high severity issues\n- [ ] Update dependencies if needed\n- [ ] Re-run the security audit\n\n/cc @${context.repo.owner}`,
              labels: ['security', 'high-priority']
            })